{"version":3,"file":"ngx-markdown.js.map","sources":["ng://ngx-markdown/src/language.pipe.ts","ng://ngx-markdown/src/marked-options.ts","ng://ngx-markdown/src/markdown.service.ts","ng://ngx-markdown/src/markdown.component.ts","ng://ngx-markdown/src/markdown.pipe.ts","ng://ngx-markdown/src/markdown.module.ts","ng://ngx-markdown/src/marked-renderer.ts"],"sourcesContent":["import { Pipe, PipeTransform } from '@angular/core';\r\n\r\n@Pipe({\r\n  name: 'language',\r\n})\r\nexport class LanguagePipe implements PipeTransform {\r\n\r\n  transform(value: string, language: string): string {\r\n    if (typeof value !== 'string') {\r\n      console.error(`LanguagePipe has been invoked with an invalid value type [${value}]`);\r\n      return value;\r\n    }\r\n    if (typeof language !== 'string') {\r\n      console.error(`LanguagePipe has been invoked with an invalid parameter [${language}]`);\r\n      return value;\r\n    }\r\n    return '```' + language + '\\n' +  value + '\\n```';\r\n  }\r\n}\r\n","import { Renderer } from 'marked';\r\n\r\nexport class MarkedOptions implements marked.MarkedOptions {\r\n  /**\r\n   * A prefix URL for any relative link.\r\n   */\r\n  baseUrl?: string;\r\n\r\n  /**\r\n   * Enable GFM line breaks. This option requires the gfm option to be true.\r\n   */\r\n  breaks?: boolean;\r\n\r\n  /**\r\n   * Enable GitHub flavored markdown.\r\n   */\r\n  gfm?: boolean;\r\n\r\n  /**\r\n   * Include an id attribute when emitting headings.\r\n   */\r\n  headerIds?: boolean;\r\n\r\n  /**\r\n   * Set the prefix for header tag ids.\r\n   */\r\n  headerPrefix?: string;\r\n\r\n  /**\r\n   * Set the prefix for code block classes.\r\n   */\r\n  langPrefix?: string;\r\n\r\n  /**\r\n   * Mangle autolinks (<email@domain.com>).\r\n   */\r\n  mangle?: boolean;\r\n\r\n  /**\r\n   * Conform to obscure parts of markdown.pl as much as possible. Don't fix any of the original markdown bugs or poor behavior.\r\n   */\r\n  pedantic?: boolean;\r\n\r\n  /**\r\n   * Type: object Default: new Renderer()\r\n   *\r\n   * An object containing functions to render tokens to HTML.\r\n   */\r\n  renderer?: Renderer;\r\n\r\n  /**\r\n   * Sanitize the output. Ignore any HTML that has been input.\r\n   */\r\n  sanitize?: boolean;\r\n\r\n  /**\r\n   * Shows an HTML error message when rendering fails.\r\n   */\r\n  silent?: boolean;\r\n\r\n  /**\r\n   * Use smarter list behavior than the original markdown. May eventually be default with the old behavior moved into pedantic.\r\n   */\r\n  smartLists?: boolean;\r\n\r\n  /**\r\n   * Use \"smart\" typograhic punctuation for things like quotes and dashes.\r\n   */\r\n  smartypants?: boolean;\r\n\r\n  /**\r\n   * Enable GFM tables. This option requires the gfm option to be true.\r\n   */\r\n  tables?: boolean;\r\n\r\n  /**\r\n   * Generate closing slash for self-closing tags (<br/> instead of <br>)\r\n   */\r\n  xhtml?: boolean;\r\n\r\n  /**\r\n   * A function to highlight code blocks. The function takes three arguments: code, lang, and callback.\r\n   */\r\n  highlight?(code: string, lang: string, callback?: (error: any | undefined, code: string) => void): string;\r\n\r\n  /**\r\n   * Optionally sanitize found HTML with a sanitizer function.\r\n   */\r\n  sanitizer?(html: string): string;\r\n}\r\n","import { HttpClient } from '@angular/common/http';\r\nimport { Injectable, Optional } from '@angular/core';\r\nimport { parse, Renderer } from 'marked';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\n\r\nimport { MarkedOptions } from './marked-options';\r\n\r\ndeclare var Prism: {\r\n  highlightAll: (async: boolean) => void;\r\n};\r\n\r\n// tslint:disable-next-line:max-line-length\r\nexport const errorSrcWithoutHttpClient = '[ngx-markdown] When using the [src] attribute you *have to* pass the `HttpClient` as a parameter of the `forRoot` method. See README for more information';\r\n\r\n@Injectable()\r\nexport class MarkdownService {\r\n  get renderer(): Renderer {\r\n    return this.options.renderer;\r\n  }\r\n  set renderer(value: marked.Renderer) {\r\n    this.options.renderer = value;\r\n  }\r\n\r\n  constructor(\r\n    @Optional() private http: HttpClient,\r\n    public options: MarkedOptions,\r\n  ) {\r\n    if (!this.renderer) {\r\n      this.renderer = new Renderer();\r\n    }\r\n  }\r\n\r\n  compile(markdown: string, markedOptions = this.options): string {\r\n    const precompiled = this.precompile(markdown);\r\n    return parse(precompiled, markedOptions);\r\n  }\r\n\r\n  getSource(src: string): Observable<string> {\r\n    if (!this.http) {\r\n      throw new Error(errorSrcWithoutHttpClient);\r\n    }\r\n\r\n    return this.http\r\n      .get(src, { responseType: 'text' })\r\n      .pipe(map(markdown => this.handleExtension(src, markdown)));\r\n  }\r\n\r\n  highlight() {\r\n    if (typeof Prism !== 'undefined') {\r\n      Prism.highlightAll(false);\r\n    }\r\n  }\r\n\r\n  private handleExtension(src: string, markdown: string): string {\r\n    const extension = src\r\n      ? src.split('.').splice(-1).join()\r\n      : null;\r\n    return extension !== 'md'\r\n      ? '```' + extension + '\\n' + markdown + '\\n```'\r\n      : markdown;\r\n  }\r\n\r\n  private precompile(markdown: string): string {\r\n    if (!markdown) {\r\n      return '';\r\n    }\r\n    let indentStart: number;\r\n    return markdown\r\n      .replace(/\\&gt;/g, '>')\r\n      .split('\\n')\r\n      .map(line => {\r\n        // find position of 1st non-whitespace character\r\n        // to determine the markdown indentation start\r\n        if (line.length > 0 && isNaN(indentStart)) {\r\n          indentStart = line.search(/\\S|$/);\r\n        }\r\n        // remove whitespaces before indentation start\r\n        return indentStart\r\n          ? line.substring(indentStart)\r\n          : line;\r\n      }).join('\\n');\r\n  }\r\n}\r\n","import { AfterViewInit, Component, ElementRef, EventEmitter, Input, Output } from '@angular/core';\r\n\r\nimport { MarkdownService } from './markdown.service';\r\n\r\n@Component({\r\n  // tslint:disable-next-line:component-selector\r\n  selector: 'markdown, [markdown]',\r\n  template: '<ng-content></ng-content>',\r\n  styles: [`:host /deep/ table{border-spacing:0;border-collapse:collapse;margin-bottom:16px}:host /deep/ table td,:host /deep/ table th{padding:6px 13px;border:1px solid #ddd}:host /deep/ table td[align=left],:host /deep/ table th[align=left]{text-align:left}:host /deep/ table td[align=center],:host /deep/ table th[align=center]{text-align:center}:host /deep/ table td[align=right],:host /deep/ table th[align=right]{text-align:right}:host /deep/ table tr:nth-child(2n){background-color:rgba(0,0,0,.03)}:host /deep/ blockquote{padding:0 1em;color:rgba(0,0,0,.535);border-left:.25em solid rgba(0,0,0,.11)}`],\r\n})\r\nexport class MarkdownComponent implements AfterViewInit {\r\n  private _data: string;\r\n  private _src: string;\r\n\r\n  @Input()\r\n  get data(): string { return this._data; }\r\n  set data(value: string) {\r\n    this._data = value;\r\n    this.render(value);\r\n  }\r\n\r\n  @Input()\r\n  get src(): string { return this._src; }\r\n  set src(value: string) {\r\n    this._src = value;\r\n    this.markdownService\r\n      .getSource(value)\r\n      .subscribe(\r\n        markdown => {\r\n          this.render(markdown);\r\n          this.load.emit(markdown);\r\n        },\r\n        error => this.error.emit(error),\r\n      );\r\n  }\r\n\r\n  @Output() error = new EventEmitter<string>();\r\n  @Output() load = new EventEmitter<string>();\r\n\r\n  get isTranscluded(): boolean {\r\n    return !this.data && !this.src;\r\n  }\r\n\r\n  constructor(\r\n    public element: ElementRef,\r\n    public markdownService: MarkdownService,\r\n  ) { }\r\n\r\n  ngAfterViewInit() {\r\n    if (this.isTranscluded) {\r\n      this.render(this.element.nativeElement.innerHTML);\r\n    }\r\n  }\r\n\r\n  render(markdown: string) {\r\n    this.element.nativeElement.innerHTML = this.markdownService.compile(markdown);\r\n    this.markdownService.highlight();\r\n  }\r\n}\r\n","import { NgZone, Pipe, PipeTransform } from '@angular/core';\r\nimport { first } from 'rxjs/operators';\r\n\r\nimport { MarkdownService } from './markdown.service';\r\n\r\n@Pipe({\r\n  name: 'markdown',\r\n})\r\nexport class MarkdownPipe implements PipeTransform {\r\n\r\n  constructor(\r\n    private markdownService: MarkdownService,\r\n    private zone: NgZone,\r\n  ) { }\r\n\r\n  transform(value: string): string {\r\n    if (typeof value !== 'string') {\r\n      console.error(`MarkdownPipe has been invoked with an invalid value type [${value}]`);\r\n      return value;\r\n    }\r\n\r\n    const markdown = this.markdownService.compile(value);\r\n\r\n    this.zone.onStable\r\n      .pipe(first())\r\n      .subscribe(() => this.markdownService.highlight());\r\n\r\n    return markdown;\r\n  }\r\n}\r\n","import { ModuleWithProviders, NgModule, Provider } from '@angular/core';\r\n\r\nimport { LanguagePipe } from './language.pipe';\r\nimport { MarkdownComponent } from './markdown.component';\r\nimport { MarkdownPipe } from './markdown.pipe';\r\nimport { MarkdownService } from './markdown.service';\r\nimport { MarkedOptions } from './marked-options';\r\n\r\n// having a dependency on `HttpClientModule` within a library\r\n// breaks all the interceptors from the app consuming the library\r\n// here, we explicitely ask the user to pass a provider with\r\n// their own instance of `HttpClientModule`\r\nexport interface MarkdownModuleConfig {\r\n  loader?: Provider;\r\n  markedOptions?: Provider;\r\n}\r\n\r\nexport const initialMarkedOptions: Provider = {\r\n  provide: MarkedOptions,\r\n  useValue: {\r\n    gfm: true,\r\n    tables: true,\r\n    breaks: false,\r\n    pedantic: false,\r\n    sanitize: false,\r\n    smartLists: true,\r\n    smartypants: false,\r\n  },\r\n};\r\n\r\nconst sharedDeclarations = [\r\n  LanguagePipe,\r\n  MarkdownComponent,\r\n  MarkdownPipe,\r\n];\r\n\r\n@NgModule({\r\n  exports: [\r\n    ...sharedDeclarations,\r\n  ],\r\n  declarations: [\r\n    ...sharedDeclarations,\r\n  ],\r\n})\r\nexport class MarkdownModule {\r\n  static forRoot(markdownModuleConfig?: MarkdownModuleConfig): ModuleWithProviders {\r\n    return {\r\n      ngModule: MarkdownModule,\r\n      providers: [\r\n        MarkdownService,\r\n        ...(markdownModuleConfig\r\n          ? [\r\n              markdownModuleConfig.loader || [],\r\n              markdownModuleConfig.markedOptions || initialMarkedOptions,\r\n            ]\r\n          : [initialMarkedOptions]),\r\n      ],\r\n    };\r\n  }\r\n\r\n  static forChild(): ModuleWithProviders {\r\n    return {\r\n      ngModule: MarkdownModule,\r\n    };\r\n  }\r\n}\r\n","import { Renderer } from 'marked';\r\n\r\nexport class MarkedRenderer extends Renderer { }\r\n"],"names":["tslib_1.__extends"],"mappings":"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"}
